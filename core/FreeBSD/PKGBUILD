pkgname=('freebsd-world' 'freebsd-kernel' 'freebsd-source' 'freebsd-lib32')
pkgver=20130502
pkgrel=2
arch=('i686' 'x86_64')
url="https://www.freebsd.org"
license=('BSD')
options=('!strip' 'emptydirs')
source=('ARCHBSD_i686'
        'ARCHBSD_i686.patch'
        'ARCHBSD_x86_64'
        'ARCHBSD_x86_64.patch'
        'loader.conf'
        'sysctl.conf'
        'src.conf'
        'beastie.4th'
        'brand.4th')
md5sums=('1da3141782687c8d455b63ae747d6c32'
         'a5ecdc82304d6ff426fdb4182f9adc10'
         '92f91f5796ed8e59c666a7b4909d454b'
         '9ab0e68675bab4a90a07dc7f0ae19d79'
         '40aae455d07111b6a38a2792f3dccb66'
         '461507865683b0d07a090df9bcef6e16'
         'f1ec479c9280a109e0391dcfae29f1ab'
         '0e9495f2a632d85404634fdbc2eb0850'
         'c3146af4b1ba8467d6b27a1fc22e322e')

_gitroot="git://github.com/freebsd/freebsd.git"
_gitname="freebsd"
_gitbranch="stable/9"

export MAKEOBJDIRPREFIX="$srcdir/obj"
build() {
  cd "${srcdir}"
  msg "Connecting to GIT server...."
 
  if [ -d ${_gitname} ] ; then
    cd ${_gitname} && git reset --hard && git clean -df && git checkout $_gitbranch && git pull
    msg "The local files are updated."
  else
    git clone --depth=1 -b $_gitbranch ${_gitroot} ${_gitname}
  fi

  sed -i '' -e 's|db.h|fdb.h|g' "${srcdir}/${_gitname}/sys/dev/aic7xxx/aicasm/aicasm_symbol.c"

  unset LDFLAGS CXXFLAGS CPPFLAGS CFLAGS M4 LD RANLIB

  cd ${srcdir}/${_gitname}
  msg "Building kernel"
  if [[ "$CARCH" == "x86_64" ]]; then
    patch ${srcdir}/${_gitname}/sys/amd64/amd64/identcpu.c  $srcdir/ARCHBSD_x86_64.patch
    TARGET=amd64
    KERNCONF=ARCHBSD_x86_64
  else
    patch ${srcdir}/${_gitname}/sys/i386/i386/identcpu.c $srcdir/ARCHBSD_i686.patch
    TARGET=i386
    KERNCONF=ARCHBSD_i686
  fi
  ln -sf "${srcdir}/$KERNCONF" ${srcdir}/${_gitname}/sys/${TARGET}/conf/$KERNCONF

  #build with clang
  export CC=clang
  export CPP=clang-cpp
  export CXX=clang++

   if [[ "$CARCH" = "x86_64" ]]; then
	export CFLAGS+="-march=x86-64 -mtune=generic"
   else
	export CFLAGS+="-march=$CARCH -mtune=generic"
   fi
   export PATH=/usr/local/bin:$PATH

  msg "Building Kernel"
  make -j1 NO_CLEAN=YES TARGET=$TARGET KERNCONF=${KERNCONF} buildkernel || (echo buildkernel failed... && return 1)

  msg "Building world"
  make -j1 NO_CLEAN=YES TARGET=$TARGET buildworld || (echo buildworld failed... && return 1)

}

package_freebsd-kernel() {
  pkgdesc="FreeBSD kernel package"
  pkgver=9.1
  groups=('base')
  options=('!strip')

  cd ${srcdir}/${_gitname}

  unset LDFLAGS
  unset CXXFLAGS CPPFLAGS CFLAGS
  unset M4
  unset LD RANLIB ld
  
  if [[ "$CARCH" == "x86_64" ]]; then
    TARGET=amd64
    KERNCONF=ARCHBSD_x86_64
  else
    TARGET=i386
    KERNCONF=ARCHBSD_i686
  fi
  make -j1 TARGET=$TARGET KERNCONF=${KERNCONF} DESTDIR=${pkgdir} installkernel || (echo installkernel failed... && return 1)
}

package_freebsd-world() {
  pkgdesc="FreeBSD base package"
  pkgver=9.1
  groups=('base')
  provides=('libc=9.1')

  cd ${srcdir}/${_gitname}
  unset LDFLAGS
  unset CXXFLAGS CPPFLAGS CFLAGS
  unset M4
  unset LD RANLIB ld

  if [[ "$CARCH" == "x86_64" ]]; then
    TARGET=amd64
  else
    TARGET=i386
  fi
  msg "Running make installworld distribution..."
  make -j1 TARGET=$TARGET DESTDIR="$pkgdir" SRCONF=${srcdir}/src.conf \
	-DWITHOUT_LIB32 -DWITHOUT_GCC -DWITHOUT_BINUTILS installworld distribution

  msg "Installed. Cleaning up and configuring..."

  #Create the links in the source for i686 and x86_64
  if [ ! -d "${srcdir}/${_gitname}"/sys/x86_64 ]; then
	ln -s "${srcdir}/${_gitname}"/sys/amd64 "${srcdir}/${_gitname}"/sys/x86_64
  fi

  if [ ! -d "${srcdir}/${_gitname}"/sys/i686 ]; then
	ln -s "${srcdir}/${_gitname}"/sys/i386 "${srcdir}/${_gitname}"/sys/i686
  fi


  #solve some conflicts
  rm -rf "${pkgdir}/usr/share/man/man3/pthread.3.gz"
  mv "${pkgdir}/usr/include/db.h" "${pkgdir}/usr/include/fdb.h"

  #remove rc tools for openrc
  rm -rf ${pkgdir}/etc/rc*
  rm -f  ${pkgdir}/usr/share/man/man8/rc.8.gz

  #Remove files provided by other packages

  msg "Removing files provided by other packages"
  for i in lp lpq lpr lprm; do
	rm -f "${pkgdir}/usr/bin/$i"
  done

  rm -f "${pkgdir}"/usr/sbin/lpc

  rm -f "${pkgdir}"/usr/share/man/man1/lp.1.gz
  rm -f "${pkgdir}"/usr/share/man/man1/lpq.1.gz
  rm -f "${pkgdir}"/usr/share/man/man1/lpr.1.gz
  rm -f "${pkgdir}"/usr/share/man/man1/lprm.1.gz
  rm -f "${pkgdir}"/usr/share/man/man8/lpc.8.gz

  #remove flex files
  rm -f "${pkgdir}"/usr/bin/flex
  rm -f "${pkgdir}"/usr/bin/flex++
  rm -f "${pkgdir}"/usr/share/man/man1/flex.1.gz

  #install some files
  install -dm755 "${pkgdir}/etc"
  install -m644 $srcdir/loader.conf "${pkgdir}/boot/"
  install -m644 $srcdir/sysctl.conf "${pkgdir}/etc/"
  install -m644 $srcdir/beastie.4th "${pkgdir}/boot/"
  install -m644 $srcdir/brand.4th "${pkgdir}/boot/"

  #remove files provided by gcc-libs
  rm -f "${pkgdir}"/usr/lib/{libgcc_s.so,libgomp.so,libgomp.so.1,libstdc++.so,libstdc++.so.6,libsupc++.a,libstdc++.a,libssp_nonshared.a,libssp.a,libgomp.a}

  #remove files provided by gcc
  rm -f "${pkgdir}"/usr/bin/{c89,c99}

  #some left over binutil files
  rm -f "${pkgdir}"/usr/bin/{ar,gprof,ranlib}
  rm -f "${pkgdir}"/usr/share/man/man1/{ar,gprof,ranlib}.1.gz

  #set var/cache to 755
  chmod -Rv 755 ${pkgdir}/var/cache

  backup=('boot/device.hints'
        'boot/loader.conf')

  cd "$pkgdir"

  for f in `find -E etc -type f ! -regex ".*periodic.*|.*mtree.*|.*defaults.*|.*README|.*Makefile"` `find root var -type f`; do
    backup=(${backup[@]} "${f}")
  done
}

package_freebsd-source() {
  pkgdesc="FreeBSD source matching FreeBSD kernel"
  options=('!strip')
  arch=('any')
  mkdir -p ${pkgdir}/usr/src
  cp -a ${srcdir}/${_gitname}/* ${pkgdir}/usr/src
  rm -rf ${pkgdir}/usr/src/.git
}

package_freebsd-lib32() {
   pkgdesc="FreeBSD lib32 libraries"
   provides=('lib32-libc')
   options=('!strip')
   arch=('x86_64')
   install=lib32.install

   cd ${srcdir}/${_gitname}
   install -dm755 ${pkgdir}/usr/lib32
   install -dm755 ${pkgdir}/usr/libexec/
   make TARGET=$TARGET DESTDIR="$pkgdir" install32
}
